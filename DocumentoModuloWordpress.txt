//// MODULO PHP WORDPRESS ////

Crear una carpeta para el modulo Wordpress en la carpeta wp-content/plugins
Es mejor si el nombre de la carpeta es el mismo que el nombre del fichero del php principal
pero el modulo puede tener varios ficheros o uno.

En el fichero PHP se puede poner informaciones en el encabezamiento como el nombre del plugin
su descripcion, la version del plugin, el autor y la licencia para declarar el plugin.

Es mejor poner un nombre de funcion empiezando con el nombre del modulo para evitar
conflictos ej: function modulo_modificar_pagina(){}

Podemos crear clases en PHP, tambien mejor con el nombre del modulo antes del nombre de la clase
y necesitamos un constructor
Ej: class Modulo_Clase{
  public function __construct(){}
}

Si hacemos varios ficheros para el plugin hay que incluirlos porque solo el ficheros
principal esta incluido. Para incluir otros ficheros hay que hacer
include_once plugin_dir_path( __FILE__ ).'/ejemplo_fichero2.php';

El plugin no funciona si no hacemos la instancia de la clase incluida en el constructor
EJ: class Modulo_Clase{
  public function __construct(){
    include_once plugin_dir_path( __FILE__ ).'/ejemplo_fichero2.php';
    new Modulo_Ejemplo();
  }
}

//// WIDGET WORDPRESS //

Para hacer un widget necesitamos una clase que viene de la clase WP_Widget() que esta
en el fichero wp-includes/widgets.php con dos funcionces

Entonces la primera funcion es el constructor de la clase que tiene que llamar el constructor de WP_Widget()
y anadir el id del widget, su nombre y por ejemplo una descripcion
Segundo tenemos la funcion widget() con args para parametros de graficos e instance para parametros para
la base de datos (front end)

Aqui un ejemplo simple de widget sin mucho contenido:
<?php
class Modulo_Clase_Widget extends WP_Widget
{
    public function __construct()
    {
        parent::__construct('modulo_clase', 'Clase', array('description' => 'Ejemplo de descripcion.'));
    }

    public function widget($args, $instance)
    {
        echo 'widget de la clase';
    }
}
?>

Podemos utilizar los parametros de la funcion dados en widget() para hacer un formulario de parametros
y tambi√©n actualizar el formulario
Los metodos son form() para hacer el formulario y update() para actualizar (back end) de la clase WP_Widget
form() toma los parametros de instance de widget() y

form() funciona con los parametros de instance de widget() para el aspecto grafico del formulario
update() funciona con dos argumentos que son $new_instance y $old_instance


//// UTILIZAR EL WIDGET ////

Hay que hacer la declaracion del widget en el constructor de la clase de nuestro modulo
Ej: <?php
include_once plugin_dir_path( __FILE__ ).'/modulo_clase_widget.php';

class Modulo_Clase
{
    public function __construct()
    {
        add_action('widgets_init', function(){register_widget('Modulo_Clase_Widget');});
    }
}
?>

=> register_widget() es para declarar el widget
=> add_action() con widgets_init es para cargar el widget en el modulo
